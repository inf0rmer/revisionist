{"name":"Revisionist","tagline":"A simple utility to help you manage content revisions.","body":"# Overview\r\nRevisionist is a simple tool to help you manage versions of content in your web application.\r\nEverytime your data changes, you can save it as a revision in a Revisionist instance.\r\nYou can then access the last x versions of your content (10 by default).\r\n\r\nRevisionist is open source. View the [annotated source code](http//inf0rmer.github.io/revisionist/docs/revisionist.html).\r\n\r\n# How to use it\r\n\r\n## In a ```<script>``` tag\r\nInclude the script in your page. A global \"Revisionist\" variable will be made available.\r\n\r\n```javascript\r\nrev = new window.Revisionist()\r\n```\r\n\r\n## With an AMD loader\r\nUsing an AMD loader such as [RequireJS](http://requirejs.org):\r\n\r\n```javascript\r\nrequire(['path/to/revisionist'], function(Revisionist) {\r\n  rev = new Revisionist()\r\n});\r\n```\r\n\r\n## In Node\r\n\r\n``` javascript\r\nRevisionist = require('path/to/revisionist')\r\nrev = new Revisionist()\r\n```\r\n\r\n# API\r\n\r\nAny instance has these two methods available:\r\n\r\n**change(newValue)**\r\n\r\nCreates a new revision. It returns the same value you passed in\r\n```javascript\r\nrev.change('bananas')\r\n// -> 'bananas'\r\n```\r\n\r\n**recover(version)**\r\n\r\nRecovers a previous version of your content and returns it.\r\n```javascript\r\nrev.change('tomatoes')\r\n\r\nrev.recover(0)\r\n// -> 'bananas'\r\n\r\nrev.recover(1)\r\n// -> 'tomatoes'\r\n```\r\n\r\n# Options\r\nWhen creating a Revisionist instance, you can pass it an options hash to change the default behaviour. The available options are:\r\n\r\n**versions | Number**\r\n\r\nThe maximum number of revisions you wish to store. Defaults to 10.\r\n\r\n**plugin | String**\r\n\r\nThe plugin you wish to use with this instance. The plugin must have been registered before using the class method ```registerPlugin```\r\n\r\n# Plugin Architecture\r\nRevisionist uses a plugin architecture, so you can wrap around it's two main functions, ```change``` and ```recover``` to implement your own logic.\r\n\r\nThe \"Simple\" plugin shipped by default simply stores and returns the values as they're passed in.\r\n\r\n## Authoring a plugin\r\nTo write a plugin, all you really have to do is provide Revisionist with a hash containing two methods:\r\n\r\n**change(newValue)**\r\n\r\nThis method will be called by the Revisionist instance when you do ```instance.change(\"bananas\")```. In this case, your implementation of ```change``` would receive an argument with a value of ```bananas```.\r\n\r\n**recover(oldValue)**\r\n\r\nThis method will be called by the Revisionist instance when you do ```instance.recover(2)```. Your implementation of ```recover``` gets an argument with the value previously stored as revision #2.\r\n\r\nBoth of these methods are executed in the context of your own plugin.\r\n\r\n### Registering and Unregistering a plugin\r\nThe ```Revisionist``` class exposes a class method to register your plugins.\r\n\r\n**registerPlugin(name, hash)**\r\n\r\nRegisters a plugin with a name and a hash containing ```change``` and ```recover``` functions. If your plugin does not follow this naming convention, it will not work properly.\r\n\r\nExample:\r\n```javascript\r\nMyPlugin = {\r\n  change: function(newValue) {},\r\n  recover: function(oldValue) {}\r\n}\r\n\r\nRevisionist.registerPlugin('myPlugin', MyPlugin);\r\n```\r\n\r\n**unregisterPlugin(name)**\r\n\r\nUnregisters a plugin with a given name.\r\n\r\nExample:\r\n```javascript\r\nRevisionist.unregisterPlugin('myPlugin')\r\n// MyPlugin is not available anymore\r\n```\r\n","google":"UA-5722833-3","note":"Don't delete this file! It's used internally to help with page regeneration."}