{"name":"Revisionist","tagline":"A simple utility to help you manage content revisions.","body":"[![Build Status](https://travis-ci.org/inf0rmer/revisionist.png?branch=master)](https://travis-ci.org/inf0rmer/revisionist)\r\n\r\n# Overview\r\nRevisionist is a simple tool to help you manage versions of content in your web application.\r\nEverytime your data changes, you can save it as a revision in a Revisionist instance.\r\nYou can then access the last x versions of your content (10 by default).\r\n\r\nRevisionist is open source. View the [annotated source code](http://inf0rmer.github.io/revisionist/docs/annotated.html).\r\n\r\n# Get it\r\n\r\n## Through [Bower](http://bower.io/)\r\n```bower install revisionist```\r\n\r\n## Through [NPM](https://npmjs.org/)\r\n```npm install revisionist```\r\n\r\n# How to use it\r\n\r\n## In a ```<script>``` tag\r\nInclude the script in your page. A global \"Revisionist\" variable will be made available.\r\n\r\n```javascript\r\nrev = new window.Revisionist()\r\n```\r\n\r\n## With an AMD loader\r\nUsing an AMD loader such as [RequireJS](http://requirejs.org):\r\n\r\n```javascript\r\nrequire(['path/to/revisionist'], function(Revisionist) {\r\n  rev = new Revisionist()\r\n});\r\n```\r\n\r\n## In Node\r\n\r\n``` javascript\r\nRevisionist = require('path/to/revisionist')\r\nrev = new Revisionist()\r\n```\r\n\r\n# API\r\n\r\nAny instance has these two methods available:\r\n\r\n**update(newValue)**\r\n\r\nCreates a new revision. It returns the same value you passed in\r\n```javascript\r\nrev.update('bananas')\r\n// -> 'bananas'\r\n```\r\n\r\n**recover(version, callback)**\r\n\r\nAsynchronously recovers a previous version of your content.\r\n```javascript\r\nrev.update('tomatoes')\r\n\r\nrev.recover(0, function(data){\r\n  // data === 'bananas'\r\n})\r\n\r\nrev.recover(1, function(data){\r\n  // data === 'tomatoes'\r\n})\r\n```\r\n\r\n**diff(version1, version2, callback)**\r\n\r\nAsynchronously presents the difference between two versions.\r\nIf no parameters are passed in, the two latest versions are assumed.\r\nIf only the first parameter is passed, it is checked against the version before it.\r\n\r\nThis function uses the Store's ```get``` methods directly instead of Revisionist's ```recover```, so the Plugin's code will not run when calling ```diff```.\r\n\r\nCalling diff returns a hash with two keys, ```old``` and ```new```, containing the values for the oldest and newest versions passed in.\r\n\r\n```javascript\r\nrev.update(2)\r\nrev.update(10)\r\n\r\nrev.diff(0, 1, function(hash){\r\n  // hash == { old: 2, new: 10 }\r\n})\r\n```\r\n\r\n**visualDiff(version1, version2, callback)**\r\n\r\nThis function will produce an HTML annotated diff string. If any non-String values are detected, an Error will be thrown.\r\n\r\n```javascript\r\nrev.update('fox')\r\nrev.update('the brown fox jumped over the lazy wizard')\r\n\r\nrev.visualDiff(0, 1, function(html){\r\n  // html === <ins>the </ins><ins>brown </ins> fox <ins>jumped </ins><ins>over </ins><ins>the </ins><ins>lazy </ins><ins>wizard\\n</ins>\r\n})\r\n```\r\n\r\n**getLatestVersionNumber**\r\n\r\nReturns the index for the last saved version. The earliest version stored is always 0, so:\r\n\r\n```javascript\r\nrev.update('once')\r\nrev.update('twice')\r\nrev.update('thrice')\r\n\r\nrev.getLatestVersionNumber()\r\n// -> 2\r\n```\r\n\r\n**clear**\r\n\r\nClears the internal cache for this instance.\r\n\r\n# Options\r\nWhen creating a Revisionist instance, you can pass it an options hash to change the default behaviour. The available options are:\r\n\r\n**versions | Number**\r\n\r\nThe maximum number of revisions you wish to store. Defaults to 10.\r\n\r\n**plugin | String**\r\n\r\nThe plugin you wish to use with this instance. The plugin must have been registered before using the class method ```registerPlugin```\r\n\r\n# Plugin Architecture\r\nRevisionist uses a plugin architecture, so you can wrap around it's two main functions, ```update``` and ```recover``` to implement your own logic.\r\n\r\nThe \"Simple\" plugin shipped by default simply stores and returns the values as they're passed in.\r\n\r\n## Authoring a plugin\r\nTo write a plugin, all you really have to do is provide Revisionist with a hash containing two methods:\r\n\r\n**update(newValue)**\r\n\r\nThis method will be called by the Revisionist instance when you do ```instance.update(\"bananas\")```. In this case, your implementation of ```update``` would receive an argument with a value of ```bananas```.\r\n\r\n**recover(oldValue)**\r\n\r\nThis method will be called by the Revisionist instance when you do ```instance.recover(2)```. Your implementation of ```recover``` gets an argument with the value previously stored as revision #2.\r\n\r\nBoth of these methods are executed in the context of your own plugin.\r\n\r\n### Registering and Unregistering a plugin\r\nThe ```Revisionist``` class exposes a class method to register your plugins.\r\n\r\n**registerPlugin(name, hash)**\r\n\r\nRegisters a plugin with a name and a hash containing ```update``` and ```recover``` functions. If your plugin does not follow this naming convention, it will not work properly.\r\n\r\nExample:\r\n```javascript\r\nMyPlugin = {\r\n  update: function(newValue) {},\r\n  recover: function(oldValue) {}\r\n}\r\n\r\nRevisionist.registerPlugin('myPlugin', MyPlugin);\r\n```\r\n\r\n**unregisterPlugin(name)**\r\n\r\nUnregisters a plugin with a given name.\r\n\r\nExample:\r\n```javascript\r\nRevisionist.unregisterPlugin('myPlugin')\r\n// MyPlugin is not available anymore\r\n```\r\n\r\n# Store Architecture\r\nRevisionist uses a store architecture, so if you require more advanced storage functions (ie. localStorage, Redis, etc) you can write your own Store class.\r\n\r\nThe \"Simple\" store shipped by default stores the values using an in-memory cache in the form of an array.\r\n\r\n## Authoring a Store\r\nTo write a store, you need to provide Revisionist with a Function with certain public API methods (plus anything else you might want).\r\n\r\n### Defining the Store constructor\r\n\r\nUsing CoffeeScript:\r\n```coffeescript\r\n\r\nclass MyStore\r\n  constructor: (options) ->\r\n    # Initialize here...\r\n\r\n  set: (value, version) ->\r\n    # Your implementation of \"set\"...\r\n\r\n  myMethod: ->\r\n    # Your implementation of \"myMethod\"...\r\n\r\n```\r\n\r\nUsing Javascript:\r\n```javascript\r\n\r\nfunction MyStore(options) {\r\n  // Initialize here...\r\n}\r\n\r\nMyStore.prototype.set = function(value, version) {\r\n  // Your implementation of \"set\"...\r\n};\r\n\r\nMyStore.prototype.myMethod = function() {\r\n  // Your implementation of \"myMethod\"...\r\n};\r\n\r\n```\r\n\r\nThe function constructor automatically receives the Revisionist instance options hash as an argument.\r\n\r\n### Store API\r\n\r\n**set (value, version)**\r\n\r\nStores a new version. The value is user-supplied and the version number is an Integer supplied by Revisionist stating which version number should be saved.\r\n\r\n**get (version, callback)**\r\n\r\nRetrieves the value for a specific version and executes the callback with it as an argument. The version number is an Integer supplied by Revisionist. It is already clamped to minimize chances that the version number is invalid.\r\n\r\n**remove (version)**\r\n\r\nRemoves a version from the Store. This is typically called by Revisionist automatically when the Store's size reaches the maximum number of versions allowed.\r\n\r\n**clear**\r\n\r\nFully empties the Store.\r\n\r\n**size**\r\n\r\nThis should return an Integer containing the current size of the Store.\r\n\r\n### Registering and Unregistering a Store\r\nThe ```Revisionist``` class exposes a class method to register your stores.\r\n\r\n**registerStore(name, Store)**\r\n\r\nRegisters a store with a name and a constructor that follows the Store API. If your store does not implement these API methods, it will not work properly.\r\n\r\nExample:\r\n```javascript\r\nvar MyStore = function(options){\r\n  //...\r\n}\r\nMyStore.prototype.get = function() {}\r\n...\r\n\r\nRevisionist.registerStore('myStore', MyStore);\r\n```\r\n\r\n**unregisterStore(name)**\r\n\r\nUnregisters a store with a given name.\r\n\r\nExample:\r\n```javascript\r\nRevisionist.unregisterStore('myStore')\r\n// MyStore is not available anymore\r\n```\r\n","google":"UA-5722833-3","note":"Don't delete this file! It's used internally to help with page regeneration."}